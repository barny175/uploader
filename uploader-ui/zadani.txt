
Note: This page does not save intermediate responses. Please prepare your work in a separate file to avoid losing it and to have a copy for your own records. All submissions are irreversible and final. Please make sure that you are satisfied with your answers before submitting the form.
Q1: New Feature Development (Upload)

Inputs

Functional requirements:
Deliver a web application that is able to upload an image.
The file upload must be restricted to PNG or JPEG types.
The image must not exceed 500KB.
The user uploads an image and provides a description.
The application displays helpful user-friendly information when an error occurs.
Gherkin
Scenario: Upload new image with success
Given browser "Google Chrome"
When I open "{environment.URL}"
And I set "file description" value to "File description placeholder"
And I click on "Choose File button"
And I click on "image.jpg"
And I press on “ENTER”
And I click on "Submit image button"
Then I should see text “Success” in “Response message placeholder”
Scenario: Upload new image without success due to missing description
Given browser "Google Chrome"
When I open "{environment.URL}"
And I click on "Choose File button"
And I click on "image.jpg"
And I press on “ENTER”
And I click on "Submit image button"
Then I should see text “Failed” in “Response message placeholder”
And I should see text “Required” in “File description error placeholder”
Non Functional requirements:
C4 model
Backend
The backend must be built in one of the following programming languages:
Java
Javascript
C++
C#
The endpoint for the upload uses the POST method
The application must return 201 (HTTP Response code) in case of a successful upload.
The application must return 400 (HTTP Response code) in case of any validation failure.
The application must return 500 (HTTP Response code) in case of any unexpected error.
All exceptions are handled safely.
You will build a service-oriented application.
The image must be physically stored in an AWS S3 bucket (Create a free-tier AWS account here if you don’t already have one)
The image information (description, file type, and size, besides a primary key) must be stored in AWS RDS.
You must handle logical consistency (if DB or S3 operation fails, ensure the remaining record is removed/rolled back).
There is a migration to automatically set up the DB database schema (script to create database table automatically).
Unit Tests with 80% coverage.
Integration Tests covering each one of the API response codes.
Use Credentials File for the AWS services authentication
Java
Javascript
C++
C#
Frontend
The frontend must be built in Angular.
The frontend must validate all inputs (File size <= 500KB, image type restricted to PNG or JPEG, and image description as required).
You will build a service-oriented application.
The frontend handles all API response codes gracefully with human-readable messages.
Your application runs on Google Chrome’s latest version.
Adhere to Code Quality Bar
Out of scope
Functional
Authentication
Drag and drop upload support
Multiple documents upload support
UX/Styling
To retrieve or display the uploaded image
Non-Functional
Performance concerns
Browser support beyond Google Chrome’s latest version
Mobile-friendly UI
Logging habilities
UI Unit tests
Question Title
*Outputs
Link to a zip file of the whole solution
Product code
Unit-test code
Integration-test code
Gherkin file describing any missing test scenarios
Script to run the solution (frontend + backend, including migration) from a single command. Include a Readme file with precise instructions on how to execute the script, including any preconditions/dependencies required at the system level.
Link to a demo video with the successful execution of the provided test scenarios (and additional ones) with evidence of test coverage.
What language did you use?
Link to Solution:
Link to Demo Video:
Q2: New Feature Development (Search)

Inputs

Functional requirements
Deliver a web application that is able to search for an image.
Upon initial load, the application shows existing records (up to 20) by default.
The application has infinite scroll
The application allows the user to search for the image file type (JPEG or PNG).
The application allows searching for image description.
The application allows searching for image file size.
The application displays helpful user-friendly information if no results found or when an error occurs.
The application lists the search results - image description, image size, image file type.
Gherkin
Scenario: Initial page load
Given browser "Google Chrome"
When I open "{environment.URL}"
Then existing records should be displayed
And the application shows up to 20 records.
Scenario: Search image with success
Given browser "Google Chrome"
When I open "{environment.URL}"
And I set "file description" value to "File description filter placeholder"
And I click on "Submit search"
Then "search-results" should be displayed
And "search-results" has 1 result.
And I should see text “file description” in "search-results 1st row file description placeholder".
And I should see the image description, image size, and image file type.
Non Functional requirements
Backend
The backend must be built in one of the following programming languages:
Java
Javascript
C++
C#
The endpoint for the search uses the GET method with query parameters per search field and current “page”.
The application must return 200 (HTTP Response code) in case of results found.
The application must return 204 (HTTP Response code) in case of results not found.
The application must return 500 (HTTP Response code) in case of any unexpected error.
All exceptions are handled safely.
You will build a service-oriented application.
The image information must be retrieved from AWS Elastic Search (id, description, file type, and size).
The response results are truncated to 20 (per “page”).
Unit Tests 80% coverage.
Integration Tests covering each one of the API response codes.
Use Credentials File for the AWS services authentication
Java
Javascript
C++
C#
Frontend
The frontend must be built in Angular.
The frontend must validate that there is at least one search parameter.
You will build a service-oriented application.
The frontend handles all API response codes gracefully with human-readable messages.
Your application runs on Google Chrome’s latest version.
Adhere to Code Quality Bar
Out of scope
Functional
Authentication
UX/Styling
Column ordering or sorting
Searching support beyond AND clause (no OR, CONTAINS, NOT, etc)
Case sensitive search
Non-Functional
Browser support beyond Google Chrome’s latest version
Mobile-friendly UI
Logging habilities
UI UTs
Question Title
*Outputs
Link to a zip file of the whole solution
Product code
Unit-test code
Integration-test code
Gherkin file in case of missing test scenarios
Script to run the solution (frontend + backend, including migration from AWS RDS to Elastic Search) from a single command.
Read me file with precise instructions on how to execute the script including preconditions/dependencies required at the system level.
Link to a demo video with the successful execution of the provided test scenarios (and additional ones) with evidence of test coverage.
What language did you use?
Link to Solution:
Link to Demo Video:
Question Title
How much time did you spend on this assessment in total?

Under 2 hours

Between 2 and 3 hours

Between 3 and 4 hours

Between 4 and 6 hours

Over 6 hours
Done
(
